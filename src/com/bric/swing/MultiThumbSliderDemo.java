/*
 * @(#)MultiThumbSliderDemo.java
 *
 * $Date$
 *
 * Copyright (c) 2015 by Jeremy Wood.
 * All rights reserved.
 *
 * The copyright of this software is owned by Jeremy Wood. 
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * Jeremy Wood. For details see accompanying license terms.
 * 
 * This software is probably, but not necessarily, discussed here:
 * https://javagraphics.java.net/
 * 
 * That site should also contain the most recent official version
 * of this software.  (See the SVN repository for more details.)
 */
package com.bric.swing;

import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Constructor;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.SliderUI;
import javax.swing.plaf.metal.MetalSliderUI;

import com.bric.blog.ResourceSample;
import com.bric.plaf.AquaMultiThumbSliderUI;
import com.bric.plaf.DefaultMultiThumbSliderUI;
import com.bric.plaf.MetalMultiThumbSliderUI;
import com.bric.plaf.MultiThumbSliderUI;
import com.bric.plaf.VistaMultiThumbSliderUI;
import com.bric.plaf.MultiThumbSliderUI.Thumb;
import com.bric.swing.MultiThumbSlider.Collision;

/** A demo app that showcases different UIs for the <code>MultiThumbSlider</code>.
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://javagraphics.java.net/resources/samples/MultiThumbSliderDemo/sample.png" alt="new&#160;com.bric.swing.MultiThumbSliderDemo()">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@ResourceSample( 
		sample= {
				"new com.bric.swing.MultiThumbSliderDemo()" })
public class MultiThumbSliderDemo extends JPanel {
	private static final long serialVersionUID = 1L;
	
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {
					String lf = UIManager.getSystemLookAndFeelClassName();
					UIManager.setLookAndFeel(lf);
					
					installMetalConstants();
				} catch (Throwable e) {
					e.printStackTrace();
				}
				
				JFrame frame = new JFrame();
		        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				frame.getContentPane().add(new MultiThumbSliderDemo());
				
				frame.pack();
				frame.setLocationRelativeTo(null);
				frame.setVisible(true);
			}
		});
	}

	/** The MetalSliderUI throws nasty NPEs if you try to use it without
	 * the MetalLookAndFeel already in use.
	 * So this is a kludgey response that helps resolve those NPEs:
	 */	
	private static void installMetalConstants() {

		UIManager.put("Slider.trackWidth", 7);
		UIManager.put("Slider.majorTickLength", 6);
		UIManager.put("Slider.horizontalThumbIcon", new ImageIcon(MultiThumbSliderDemo.class.getResource("resources/Slider.horizontalThumbIcon.png")));
		UIManager.put("Slider.verticalThumbIcon", new ImageIcon(MultiThumbSliderDemo.class.getResource("resources/Slider.verticalThumbIcon.png")));
	}
	
	class MultiThumbPanel extends JPanel {
		private static final long serialVersionUID = 1L;
		
		JComboBox<Collision> collisionComboBox = new JComboBox<Collision>();
		JComboBox<Class> uiComboBox = new JComboBox<Class>();
		JComboBox<DefaultMultiThumbSliderUI.Thumb> thumbComboBox = new JComboBox<DefaultMultiThumbSliderUI.Thumb>();
		JRadioButton overlapOnButton = new JRadioButton("On");
		JRadioButton overlapOffButton = new JRadioButton("Off");
		JRadioButton removalOnButton = new JRadioButton("Allowed");
		JRadioButton removalOffButton = new JRadioButton("Not Allowed");
		
		MultiThumbSlider<Character> slider1 = new MultiThumbSlider<Character>(MultiThumbSlider.HORIZONTAL, new float[] {0f, .5f, .75f, 1f}, new Character[] {'A', 'B', 'C', 'D'});
		MultiThumbSlider<Character> slider2 = new MultiThumbSlider<Character>(MultiThumbSlider.VERTICAL, new float[] {0f, .75f}, new Character[] {'X', 'Y'});
		MultiThumbSlider<Character> slider3 = new MultiThumbSlider<Character>(MultiThumbSlider.VERTICAL, new float[] {0f, .4f, .75f}, new Character[] {'X', 'Y', 'Z'});
		MultiThumbSlider<Character> slider4 = new MultiThumbSlider<Character>(MultiThumbSlider.HORIZONTAL, new float[] {0f, .4f}, new Character[] {'X', 'Y'});
		MultiThumbSlider<?>[] sliders = new MultiThumbSlider<?>[] { slider1, slider2, slider3, slider4 };
	
	
		public MultiThumbPanel() {
			setLayout(new GridBagLayout());
			JPanel controls = new JPanel(new GridBagLayout());
			
			GridBagConstraints c = new GridBagConstraints();
			c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 0;
			c.fill = GridBagConstraints.BOTH;
			c.gridwidth = GridBagConstraints.REMAINDER;
			add(controls, c);
			
			c.gridwidth = 1;
			c.gridx = 1; c.gridy = 1; c.weightx = 1; c.weighty = 0;
			c.fill = GridBagConstraints.BOTH; c.insets = new Insets(10,10,10,10);
			slider1.setAutoAdding(false);
			slider1.setPaintTicks(true);
			slider1.setThumbRemovalAllowed(false);
			add(slider1,c);
	
			c.gridx = 0; c.gridy = 2; c.weightx = 0; c.weighty = 1;
			slider2.setAutoAdding(false);
			slider2.setPaintTicks(true);
			slider2.setThumbRemovalAllowed(false);
			add(slider2,c);
	
			c.gridx = 2; c.gridy = 2;
			slider3.setAutoAdding(false);
			slider3.setInverted(true);
			slider3.setThumbRemovalAllowed(false);
			add(slider3,c);
	
			c.gridx = 1; c.gridy = 3; c.weightx = 1; c.weighty = 0;
			slider4.setAutoAdding(false);
			slider4.setInverted(true);
			slider4.setThumbRemovalAllowed(false);
			add(slider4,c);
			
			c = new GridBagConstraints();
			c.gridx = 0; c.gridy = 0; c.anchor = GridBagConstraints.EAST;
			c.insets = new Insets(3,3,3,3);
			controls.add(new JLabel("Collision Policy:"), c);
			c.gridy++;
			controls.add(new JLabel("Thumb Shape:"), c);
			c.gridy++;
			controls.add(new JLabel("Thumb Overlap:"), c);
			c.gridy++;
			controls.add(new JLabel("Removal:"), c);
			c.gridy++;
			controls.add(new JLabel("UI:"), c);
			
			c.gridy = 0; c.gridx = 1; c.anchor = GridBagConstraints.WEST;
			controls.add(collisionComboBox, c);
			c.gridy++;
			controls.add(thumbComboBox, c);
			c.gridy++;
			controls.add(wrap(overlapOnButton, overlapOffButton), c);
			c.gridy++;
			controls.add(wrap(removalOnButton, removalOffButton), c);
			c.gridy++;
			controls.add(uiComboBox, c);
			
			ButtonGroup group1 = new ButtonGroup();
			group1.add(overlapOnButton);
			group1.add(overlapOffButton);
	
			ButtonGroup group2 = new ButtonGroup();
			group2.add(removalOnButton);
			group2.add(removalOffButton);
			
			overlapOffButton.setSelected(true);
			removalOffButton.setSelected(true);
			
			ActionListener overlapActionListener = new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					for(MultiThumbSlider<?> s : sliders) {
						s.setThumbOverlap( overlapOnButton.isSelected() );
					}
				}
			};
			overlapOnButton.addActionListener(overlapActionListener);
			overlapOffButton.addActionListener(overlapActionListener);
			
			ActionListener removalActionListener = new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					for(MultiThumbSlider<?> s : sliders) {
						s.setThumbRemovalAllowed( removalOnButton.isSelected() );
					}
				}
			};
			removalOnButton.addActionListener(removalActionListener);
			removalOffButton.addActionListener(removalActionListener);
			
			for(Collision collision : Collision.values()) {
				collisionComboBox.addItem(collision);
			}
			ActionListener collisionActionListener = new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					for(MultiThumbSlider<?> s : sliders) {
						s.setCollisionPolicy( (Collision)collisionComboBox.getSelectedItem() );
					}
				}
			};
			collisionComboBox.addActionListener(collisionActionListener);
	
	
			for(Thumb t : Thumb.values()) {
				thumbComboBox.addItem(t);
			}
			ActionListener thumbActionListener = new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					for(MultiThumbSlider<?> s : sliders) {
						s.putClientProperty(MultiThumbSliderUI.THUMB_SHAPE_PROPERTY, (Thumb)thumbComboBox.getSelectedItem() );
					}
				}
			};
			thumbComboBox.addActionListener(thumbActionListener);
			
			thumbActionListener.actionPerformed(null);
			collisionActionListener.actionPerformed(null);
			overlapActionListener.actionPerformed(null);
			removalActionListener.actionPerformed(null);
			controls.setOpaque(false);
			
			//optional console output
			for(MultiThumbSlider<?> s : sliders) {
				s.addChangeListener(new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {
						MultiThumbSlider<?> s = (MultiThumbSlider<?>)e.getSource();
						float[] pos = s.getThumbPositions();
						Object[] values = s.getValues();
						for(int a = 0; a<pos.length; a++) {
							System.out.println("thumb["+a+"]: "+pos[a]+" -> "+values[a]);
						}
					}
				});
			}
			
			uiComboBox.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					try {
						for(MultiThumbSlider<?> s : sliders) {
							Class t = (Class)uiComboBox.getSelectedItem();
							Constructor constructor = t.getConstructor(new Class[] { MultiThumbSlider.class  } );
							s.setUI( (MultiThumbSliderUI)constructor.newInstance(new Object[] {s}) );
						}
						Window w = SwingUtilities.getWindowAncestor(MultiThumbSliderDemo.this);
						if(w!=null)
							w.pack();
					} catch(Throwable t) {
						t.printStackTrace();
					}
				}
			});
			uiComboBox.addItem(AquaMultiThumbSliderUI.class);
			uiComboBox.addItem(DefaultMultiThumbSliderUI.class);
			uiComboBox.addItem(VistaMultiThumbSliderUI.class);
			uiComboBox.addItem(MetalMultiThumbSliderUI.class);

			setOpaque(false);
			
		}
	}
	
	class SliderPanel extends JPanel {
		private static final long serialVersionUID = 1L;
		
		JComboBox<Class> uiComboBox = new JComboBox<Class>();
		
		JSlider slider1 = new JSlider();
		JSlider slider2 = new JSlider();
		JSlider slider3 = new JSlider();
		JSlider slider4 = new JSlider();
		JSlider[] sliders = new JSlider[] { slider1, slider2, slider3, slider4 };
	
	
		public SliderPanel() {
			setLayout(new GridBagLayout());
			
			for(JSlider s : sliders) {
				s.setOpaque(false);
			}
			
			JPanel controls = new JPanel(new GridBagLayout());
			
			GridBagConstraints c = new GridBagConstraints();
			c.gridx = 0; c.gridy = 0; c.weightx = 1; c.weighty = 0;
			c.fill = GridBagConstraints.BOTH;
			c.gridwidth = GridBagConstraints.REMAINDER;
			add(controls, c);
			
			c.gridwidth = 1;
			c.gridx = 1; c.gridy = 1; c.weightx = 1; c.weighty = 0;
			c.fill = GridBagConstraints.BOTH; c.insets = new Insets(10,10,10,10);
			slider1.setPaintTicks(true);
			add(slider1,c);
	
			c.gridx = 0; c.gridy = 2; c.weightx = 0; c.weighty = 1;
			slider2.setPaintTicks(true);
			slider2.setOrientation(SwingConstants.VERTICAL);
			add(slider2,c);
	
			c.gridx = 2; c.gridy = 2;
			slider3.setInverted(true);
			slider3.setOrientation(SwingConstants.VERTICAL);
			add(slider3,c);
	
			c.gridx = 1; c.gridy = 3; c.weightx = 1; c.weighty = 0;
			slider4.setInverted(true);
			add(slider4,c);
			
			c = new GridBagConstraints();
			c.gridx = 0; c.gridy = 0; c.anchor = GridBagConstraints.EAST;
			c.insets = new Insets(3,3,3,3);
			controls.add(new JLabel("UI:"), c);
			
			c.gridy = 0; c.gridx = 1; c.anchor = GridBagConstraints.WEST;
			controls.add(uiComboBox, c);
			
			controls.setOpaque(false);
			uiComboBox.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					try {
						for(JSlider s : sliders) {
							Class t = (Class)uiComboBox.getSelectedItem();
							pickConstructor : for(Constructor c : t.getConstructors()) {
								if(c.getParameterTypes().length==0) {
									s.setUI( (SliderUI)t.newInstance() );
									break pickConstructor;
								} else if(c.getParameterTypes().length==1) {
									s.setUI( (SliderUI)c.newInstance(new Object[] { s }) );
									break pickConstructor;
								}
							}
						}
					} catch(Throwable t) {
						t.printStackTrace();
					}
				}
			});
			
			uiComboBox.addItem(MetalSliderUI.class);
			uiComboBox.addItem(UIManager.getUI(slider1).getClass());
			
			setOpaque(false);
		}
	}
	
	public MultiThumbSliderDemo() {
		installMetalConstants();
		
		JTabbedPane tabs = new JTabbedPane();
		tabs.add(new MultiThumbPanel(), "MultiThumbSlider");
		tabs.add(new SliderPanel(), "JSlider");
		add(tabs);
	}
	
	private JPanel wrap(JComponent... list) {
		JPanel p = new JPanel(new FlowLayout());
		p.setOpaque(false);
		for(JComponent c : list) {
			p.add(c);
			c.setOpaque(false);
		}
		return p;
	}
}
